function [OUT] = getBehavior_vp_eegCAT(IN,locking,trialnums,set_fb,pos,set_stim,pos_stim,rt_stim)

%aggregate variables
valueP1 = [IN.value1_p1  IN.value2_p1];
valueP2 = [IN.value1_p2  IN.value2_p2];
difficultyP1 = [IN.diff1_p1  IN.diff2_p1];
difficultyP2 = [IN.diff1_p2  IN.diff2_p2];

valueP1_old = [IN.value1_p1_old  IN.value2_p1_old];
valueP2_old = [IN.value1_p2_old  IN.value2_p2_old];
difficultyP1_old = [IN.diff1_p1_old  IN.diff2_p1_old];
difficultyP2_old = [IN.diff1_p2_old  IN.diff2_p2_old];

valueNet_old = [IN.value_Q1net_old  IN.value_Q2net_old];
difficultyNet_old = [IN.diff_Q1net_old  IN.diff_Q2net_old];

choices = [IN.c1 IN.c2];
behaviors = abs(diff(choices,[],1)); %switch = 1
behaviors(behaviors==0) = -1; %stay = -1 
behaviors_old = [nan nan; behaviors];
behaviors_old(1:100:300,:) = nan;
behaviors = [behaviors; nan nan];
behaviors(100:100:300,:) = nan;

% evidence_resp = sum(IN.hpe,2);

%sort RPEs &Qupdated (for feedback locked)
nTrial = length(trialnums);
startend = nan(nTrial,1);
rpe_p1_sort = nan(nTrial,1);
rpe_p2_sort = nan(nTrial,1);
Q_p1_sort = nan(nTrial,1);
Q_p2_sort = nan(nTrial,1);
value_p1_sort = nan(nTrial,1);
value_p2_sort = nan(nTrial,1);
diff_p1_sort = nan(nTrial,1);
diff_p2_sort = nan(nTrial,1);
hpe_sort = nan(nTrial,1); %evidence
cav = nan(nTrial,1); %credit assignment value
caw = nan(nTrial,1); %credit assignment weight
% caw2 = nan(nTrial,1); %credit assignment weight

value_net_old = nan(nTrial,1);
diff_net_old = nan(nTrial,1);

%sort value etc(for response locked)
value_p1_old = nan(nTrial,1);
value_p2_old = nan(nTrial,1);
diff_p1_old = nan(nTrial,1);
diff_p2_old = nan(nTrial,1);
evd_resp_old = nan(nTrial,1); %evidence
cav_old = nan(nTrial,1); %credit assignment value
caw_old = nan(nTrial,1); %credit assignment weight
behavior_old = nan(nTrial,1); %switch or stay

% caw_pre = reshape(repmat(IN.caw_,[1 2])',1,2*numel(IN.caw))';

for iT = 1:length(trialnums)
    
    %% feedback locked part
    rpe_p1_sort(iT,1) = IN.rpe_p1(trialnums(iT),set_fb(iT));
    rpe_p2_sort(iT,1) = IN.rpe_p2(trialnums(iT),3-set_fb(iT)); %flip rpes for policy2 due to stage-coding in model
%     Q_p1_sort = [Q_p1_sort; QP1(trialnums(iT),seq(iT))];
%     Q_p2_sort = [Q_p2_sort; QP2(trialnums(iT),seq(iT))];
    value_p1_sort(iT,1) = valueP1(trialnums(iT),set_fb(iT));
    value_p2_sort(iT,1) = valueP2(trialnums(iT),set_fb(iT));
    diff_p1_sort(iT,1) = difficultyP1(trialnums(iT),set_fb(iT));
    diff_p2_sort(iT,1) = difficultyP2(trialnums(iT),set_fb(iT));
    hpe_sort(iT,1) = IN.hpe(trialnums(iT),set_fb(iT));
    
    if pos(iT) == 2
        caw(iT,1) = IN.caw_new(trialnums(iT));
        cav(iT,1) = log(caw(iT,1)/(1-caw(iT,1)));
    elseif pos(iT) == 1
        cat = IN.caw_old(trialnums(iT));
        ca = log(cat/(1-cat)); %logit (inverse sigmoidal);
        surprise1 = abs(rpe_p1_sort(iT,1));
        surprise2 = abs(rpe_p2_sort(iT,1));
        evidence = surprise2 - surprise1;
        ca2 = ca + IN.param(4) * evidence;
        cat2 = exp(ca2)./(1+exp(ca2));
        cav(iT,1) = ca2;
        caw(iT,1) = cat2;
    else
        error('something is off')
    end

    %% response locked part
    if strcmp(locking,'resp')
        caw_old(iT,1) = IN.caw_old(trialnums(iT));
        cav_old(iT,1) = log(IN.caw_old(trialnums(iT))/(1-IN.caw_old(trialnums(iT))));
        
        value_p1_old(iT,1) = valueP1_old(trialnums(iT),set_stim(iT));
        value_p2_old(iT,1) = valueP2_old(trialnums(iT),set_stim(iT));
        diff_p1_old(iT,1) = difficultyP1_old(trialnums(iT),set_stim(iT));
        diff_p2_old(iT,1) = difficultyP2_old(trialnums(iT),set_stim(iT));
        behavior_old(iT,1) = behaviors_old(trialnums(iT),set_stim(iT));
        
        value_net_old(iT,1) = valueNet_old(trialnums(iT),set_stim(iT));
        diff_net_old(iT,1) = difficultyNet_old(trialnums(iT),set_stim(iT));
        
        if rem(trialnums(iT),100) == 1
            evd_resp_old(iT,1) = nan;
        else
            evd_resp_old(iT,1) = IN.evidence_resp(trialnums(iT)-1,pos_stim(iT));
        end
    end

%         caw(iT,1) = caw_pre(trialnums(iT));
end

% valence is the direction of the rpe
valence_p1 = sign(rpe_p1_sort);
valence_p2 = sign(rpe_p2_sort);

% surprise is the distance to zero
surprise_p1 = abs(rpe_p1_sort);
surprise_p2 = abs(rpe_p2_sort);

actualtrialnums = rem(trialnums,100);
actualtrialnums(actualtrialnums==0) = 100;
startend(actualtrialnums<=20) = -1;
startend(actualtrialnums>=80) = 1;

OUT.rpeP1 = rpe_p1_sort;
OUT.rpeP2 = rpe_p2_sort;
OUT.valenceP1 = valence_p1;
OUT.valenceP2 = valence_p2;
OUT.surpriseP1 = surprise_p1;
OUT.surpriseP2 = surprise_p2;
OUT.valueP1 = value_p1_sort;
OUT.valueP2 = value_p2_sort;
OUT.difficultyP1 = diff_p1_sort;
OUT.difficultyP2 = diff_p2_sort;
OUT.hpe = hpe_sort;
OUT.cav = cav;
OUT.caw = caw;
OUT.set = set_fb;
OUT.pos = pos;
OUT.startend = startend;

if strcmp(locking,'resp')
    OUT.valueP1_old = value_p1_old;
    OUT.valueP2_old = value_p2_old;
    OUT.diffP1_old = diff_p1_old;
    OUT.diffP2_old = diff_p2_old;
    OUT.cav_old = cav_old;
    OUT.caw_old = caw_old;
    OUT.pos_old = pos_stim';
    OUT.rt_old = rt_stim';
    OUT.behavior_old = behavior_old;
    OUT.hpe_old = evd_resp_old;
    
    OUT.valueNet_old = value_net_old;
    OUT.diffNet_old = diff_net_old;
end




